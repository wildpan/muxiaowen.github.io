{
  "name": "bson",
  "description": "A bson parser for node.js and the browser",
  "keywords": [
    "mongodb",
    "bson",
    "parser"
  ],
  "files": [
    "lib",
    "index.js",
    "browser_build",
    "bower.json"
  ],
  "version": "1.0.4",
  "author": {
    "name": "Christian Amor Kvalheim",
    "email": "christkv@gmail.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/mongodb/js-bson"
  },
  "bugs": {
    "url": "https://github.com/mongodb/js-bson/issues"
  },
  "devDependencies": {
    "benchmark": "1.0.0",
    "colors": "1.1.0",
    "nodeunit": "0.9.0",
    "babel-core": "^6.14.0",
    "babel-loader": "^6.2.5",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.14.0",
    "webpack": "^1.13.2",
    "webpack-polyfills-plugin": "0.0.9"
  },
  "config": {
    "native": false
  },
  "main": "./index",
  "directories": {
    "lib": "./lib/bson"
  },
  "engines": {
    "node": ">=0.6.19"
  },
  "scripts": {
    "test": "nodeunit ./test/node",
    "build": "webpack --config ./webpack.dist.config.js"
  },
  "browser": "lib/bson/bson.js",
  "license": "Apache-2.0",
  "readme": "# BSON parser\n\nIf you don't yet know what BSON actually is, read [the spec](http://bsonspec.org).\n\nThe browser version of the BSON parser is compiled using webpack and the current\nversion is pre-compiled in the browser_build directory. To build a new version perform the following operation.\n\n```\nnpm install\nnpm run build\n```\n\nA simple example of how to use BSON in the browser:\n\n```html\n<script src=\"./browser_build/bson.js\"></script>\n\n<script>\n  function start() {\n    // Get the Long type\n    var Long = BSON.Long;\n    // Create a bson parser instance\n    var bson = new BSON();\n\n    // Serialize document\n    var doc = { long: Long.fromNumber(100) }\n\n    // Serialize a document\n    var data = bson.serialize(doc)\n    // De serialize it again\n    var doc_2 = bson.deserialize(data)\n  }\n</script>\n```\n\nA simple example of how to use BSON in `node.js`:\n\n```js\n// Get BSON parser class\nvar BSON = require('bson')\n// Get the Long type\nvar Long = BSON.Long;\n// Create a bson parser instance\nvar bson = new BSON();\n\n// Serialize document\nvar doc = { long: Long.fromNumber(100) }\n\n// Serialize a document\nvar data = bson.serialize(doc)\nconsole.log('data:', data)\n\n// Deserialize the resulting Buffer\nvar doc_2 = bson.deserialize(data)\nconsole.log('doc_2:', doc_2)\n```\n\n## Installation\n\n`npm install bson`\n\n## API\n\n### BSON types\n\nFor all BSON types documentation, please refer to the documentation for the mongodb driver.\n\nhttps://github.com/mongodb/node-mongodb-native\n\n### BSON serialization and deserialiation\n\n**`new BSON()`** - Creates a new BSON seralizer/deserializer you can use to serialize and deserialize BSON.\n\n#### BSON.serialize\n\nThe BSON serialize method takes a javascript object and an optional options object and returns a Node.js Buffer.\n\n  * BSON.serialize(object, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Boolean} [options.checkKeys=false] the serializer will check if keys are valid.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript. functions.\n    * @param {Boolean} [options.ignoreUndefined=true]\n    * @return {Buffer} returns a Buffer instance.\n\n#### BSON.serializeWithBufferAndIndex\n\nThe BSON serializeWithBufferAndIndex method takes an object, a target buffer instance and an optional options object and returns the end serialization index in the final buffer.\n\n  * BSON.serializeWithBufferAndIndex(object, buffer, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n    * @param {Boolean} [options.checkKeys=false] the serializer will check if keys are valid.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions.\n    * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields.\n    * @param {Number} [options.index=0] the index in the buffer where we wish to start serializing into.\n    * @return {Number} returns the index pointing to the last written byte in the buffer.\n\n#### BSON.calculateObjectSize\n\nThe BSON calculateObjectSize method takes a javascript object and an optional options object and returns the size of the BSON object.\n\n  * BSON.calculateObjectSize(object, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript. functions.\n    * @param {Boolean} [options.ignoreUndefined=true]\n    * @return {Buffer} returns a Buffer instance.\n\n#### BSON.deserialize\n\nThe BSON deserialize method takes a node.js Buffer and an optional options object and returns a deserialized Javascript object.\n\n  * BSON.deserialize(buffer, options)\n    * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n    * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n    * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n    * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n    * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n    * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n    * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n    * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n    * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n\n#### BSON.deserializeStream\n\nThe BSON deserializeStream method takes a node.js Buffer, startIndex and allow more control over deserialization of a Buffer containing concatenated BSON documents.\n\n  * BSON.deserializeStream(buffer, startIndex, numberOfDocuments, documents, docStartIndex, options)\n    * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n    * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n    * @param {Number} numberOfDocuments number of documents to deserialize.\n    * @param {Array} documents an array where to store the deserialized documents.\n    * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n    * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n    * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n    * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n    * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n    * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n    * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n    * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n    * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n    * @return {Object} returns the deserialized Javascript Object.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mongodb/js-bson",
  "_id": "bson@1.0.4",
  "_from": "bson@~1.0.4"
}
